// Code generated by go-mockgen 1.3.3; DO NOT EDIT.

package server

import "sync"

// MockGenerator is a mock implementation of the Generator interface (from
// the package github.com/Karitham/shurl/server) used for unit testing.
type MockGenerator struct {
	// GenerateFunc is an instance of a mock function object controlling the
	// behavior of the method Generate.
	GenerateFunc *GeneratorGenerateFunc
}

// NewMockGenerator creates a new mock of the Generator interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGenerator() *MockGenerator {
	return &MockGenerator{
		GenerateFunc: &GeneratorGenerateFunc{
			defaultHook: func() (r0 []byte, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGenerator creates a new mock of the Generator interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockGenerator() *MockGenerator {
	return &MockGenerator{
		GenerateFunc: &GeneratorGenerateFunc{
			defaultHook: func() ([]byte, error) {
				panic("unexpected invocation of MockGenerator.Generate")
			},
		},
	}
}

// NewMockGeneratorFrom creates a new mock of the MockGenerator interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockGeneratorFrom(i Generator) *MockGenerator {
	return &MockGenerator{
		GenerateFunc: &GeneratorGenerateFunc{
			defaultHook: i.Generate,
		},
	}
}

// GeneratorGenerateFunc describes the behavior when the Generate method of
// the parent MockGenerator instance is invoked.
type GeneratorGenerateFunc struct {
	defaultHook func() ([]byte, error)
	hooks       []func() ([]byte, error)
	history     []GeneratorGenerateFuncCall
	mutex       sync.Mutex
}

// Generate delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGenerator) Generate() ([]byte, error) {
	r0, r1 := m.GenerateFunc.nextHook()()
	m.GenerateFunc.appendCall(GeneratorGenerateFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Generate method of
// the parent MockGenerator instance is invoked and the hook queue is empty.
func (f *GeneratorGenerateFunc) SetDefaultHook(hook func() ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Generate method of the parent MockGenerator instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GeneratorGenerateFunc) PushHook(hook func() ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GeneratorGenerateFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func() ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GeneratorGenerateFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func() ([]byte, error) {
		return r0, r1
	})
}

func (f *GeneratorGenerateFunc) nextHook() func() ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GeneratorGenerateFunc) appendCall(r0 GeneratorGenerateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GeneratorGenerateFuncCall objects
// describing the invocations of this function.
func (f *GeneratorGenerateFunc) History() []GeneratorGenerateFuncCall {
	f.mutex.Lock()
	history := make([]GeneratorGenerateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GeneratorGenerateFuncCall is an object that describes an invocation of
// method Generate on an instance of MockGenerator.
type GeneratorGenerateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GeneratorGenerateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GeneratorGenerateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
